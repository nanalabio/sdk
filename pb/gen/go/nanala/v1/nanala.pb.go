// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: nanala/v1/nanala.proto

package nanalav1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VectorBackbone int32

const (
	VectorBackbone_VECTOR_BACKBONE_UNSPECIFIED VectorBackbone = 0
	VectorBackbone_VECTOR_BACKBONE_POPENV3     VectorBackbone = 1
)

// Enum value maps for VectorBackbone.
var (
	VectorBackbone_name = map[int32]string{
		0: "VECTOR_BACKBONE_UNSPECIFIED",
		1: "VECTOR_BACKBONE_POPENV3",
	}
	VectorBackbone_value = map[string]int32{
		"VECTOR_BACKBONE_UNSPECIFIED": 0,
		"VECTOR_BACKBONE_POPENV3":     1,
	}
)

func (x VectorBackbone) Enum() *VectorBackbone {
	p := new(VectorBackbone)
	*p = x
	return p
}

func (x VectorBackbone) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorBackbone) Descriptor() protoreflect.EnumDescriptor {
	return file_nanala_v1_nanala_proto_enumTypes[0].Descriptor()
}

func (VectorBackbone) Type() protoreflect.EnumType {
	return &file_nanala_v1_nanala_proto_enumTypes[0]
}

func (x VectorBackbone) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorBackbone.Descriptor instead.
func (VectorBackbone) EnumDescriptor() ([]byte, []int) {
	return file_nanala_v1_nanala_proto_rawDescGZIP(), []int{0}
}

type PartType int32

const (
	PartType_PART_TYPE_UNSPECIFIED                       PartType = 0
	PartType_PART_TYPE_NONE                              PartType = 1
	PartType_PART_TYPE_PROMOTER                          PartType = 2  // P
	PartType_PART_TYPE_RBS                               PartType = 3  // R
	PartType_PART_TYPE_CDS                               PartType = 4  // C
	PartType_PART_TYPE_TERMINATOR                        PartType = 5  // T
	PartType_PART_TYPE_PROMOTER_RBS                      PartType = 6  // PR
	PartType_PART_TYPE_N_TAG                             PartType = 7  // Cn
	PartType_PART_TYPE_CDS_FOR_N_TAG                     PartType = 8  // Ct
	PartType_PART_TYPE_IDENTITY                          PartType = 9  // PRCT
	PartType_PART_TYPE_TERMINATOR_FOR_C_TAG              PartType = 10 // Tt
	PartType_PART_TYPE_C_TAG                             PartType = 11 // Cc
	PartType_PART_TYPE_TARGET_SELECTIVE_MARKER           PartType = 12 // S
	PartType_PART_TYPE_TARGET_ORI_OR_DOWNSTREAM_HOMOLOGY PartType = 13 // D
	PartType_PART_TYPE_UPSTREAM_HOMOLOGY                 PartType = 14 // U
	PartType_PART_TYPE_RBS_CDS                           PartType = 15 // RC
)

// Enum value maps for PartType.
var (
	PartType_name = map[int32]string{
		0:  "PART_TYPE_UNSPECIFIED",
		1:  "PART_TYPE_NONE",
		2:  "PART_TYPE_PROMOTER",
		3:  "PART_TYPE_RBS",
		4:  "PART_TYPE_CDS",
		5:  "PART_TYPE_TERMINATOR",
		6:  "PART_TYPE_PROMOTER_RBS",
		7:  "PART_TYPE_N_TAG",
		8:  "PART_TYPE_CDS_FOR_N_TAG",
		9:  "PART_TYPE_IDENTITY",
		10: "PART_TYPE_TERMINATOR_FOR_C_TAG",
		11: "PART_TYPE_C_TAG",
		12: "PART_TYPE_TARGET_SELECTIVE_MARKER",
		13: "PART_TYPE_TARGET_ORI_OR_DOWNSTREAM_HOMOLOGY",
		14: "PART_TYPE_UPSTREAM_HOMOLOGY",
		15: "PART_TYPE_RBS_CDS",
	}
	PartType_value = map[string]int32{
		"PART_TYPE_UNSPECIFIED":                       0,
		"PART_TYPE_NONE":                              1,
		"PART_TYPE_PROMOTER":                          2,
		"PART_TYPE_RBS":                               3,
		"PART_TYPE_CDS":                               4,
		"PART_TYPE_TERMINATOR":                        5,
		"PART_TYPE_PROMOTER_RBS":                      6,
		"PART_TYPE_N_TAG":                             7,
		"PART_TYPE_CDS_FOR_N_TAG":                     8,
		"PART_TYPE_IDENTITY":                          9,
		"PART_TYPE_TERMINATOR_FOR_C_TAG":              10,
		"PART_TYPE_C_TAG":                             11,
		"PART_TYPE_TARGET_SELECTIVE_MARKER":           12,
		"PART_TYPE_TARGET_ORI_OR_DOWNSTREAM_HOMOLOGY": 13,
		"PART_TYPE_UPSTREAM_HOMOLOGY":                 14,
		"PART_TYPE_RBS_CDS":                           15,
	}
)

func (x PartType) Enum() *PartType {
	p := new(PartType)
	*p = x
	return p
}

func (x PartType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PartType) Descriptor() protoreflect.EnumDescriptor {
	return file_nanala_v1_nanala_proto_enumTypes[1].Descriptor()
}

func (PartType) Type() protoreflect.EnumType {
	return &file_nanala_v1_nanala_proto_enumTypes[1]
}

func (x PartType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PartType.Descriptor instead.
func (PartType) EnumDescriptor() ([]byte, []int) {
	return file_nanala_v1_nanala_proto_rawDescGZIP(), []int{1}
}

type Fragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sequence        string `protobuf:"bytes,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	ForwardOverhang string `protobuf:"bytes,3,opt,name=forward_overhang,json=forwardOverhang,proto3" json:"forward_overhang,omitempty"`
	ReverseOverhang string `protobuf:"bytes,4,opt,name=reverse_overhang,json=reverseOverhang,proto3" json:"reverse_overhang,omitempty"`
}

func (x *Fragment) Reset() {
	*x = Fragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nanala_v1_nanala_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fragment) ProtoMessage() {}

func (x *Fragment) ProtoReflect() protoreflect.Message {
	mi := &file_nanala_v1_nanala_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fragment.ProtoReflect.Descriptor instead.
func (*Fragment) Descriptor() ([]byte, []int) {
	return file_nanala_v1_nanala_proto_rawDescGZIP(), []int{0}
}

func (x *Fragment) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Fragment) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *Fragment) GetForwardOverhang() string {
	if x != nil {
		return x.ForwardOverhang
	}
	return ""
}

func (x *Fragment) GetReverseOverhang() string {
	if x != nil {
		return x.ReverseOverhang
	}
	return ""
}

type GoldenGateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fragments []*Fragment    `protobuf:"bytes,1,rep,name=fragments,proto3" json:"fragments,omitempty"`
	Backbone  VectorBackbone `protobuf:"varint,2,opt,name=backbone,proto3,enum=nanala.v1.VectorBackbone" json:"backbone,omitempty"`
}

func (x *GoldenGateRequest) Reset() {
	*x = GoldenGateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nanala_v1_nanala_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoldenGateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldenGateRequest) ProtoMessage() {}

func (x *GoldenGateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nanala_v1_nanala_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldenGateRequest.ProtoReflect.Descriptor instead.
func (*GoldenGateRequest) Descriptor() ([]byte, []int) {
	return file_nanala_v1_nanala_proto_rawDescGZIP(), []int{1}
}

func (x *GoldenGateRequest) GetFragments() []*Fragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

func (x *GoldenGateRequest) GetBackbone() VectorBackbone {
	if x != nil {
		return x.Backbone
	}
	return VectorBackbone_VECTOR_BACKBONE_UNSPECIFIED
}

type GoldenGateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullSequence string `protobuf:"bytes,2,opt,name=full_sequence,json=fullSequence,proto3" json:"full_sequence,omitempty"`
}

func (x *GoldenGateResponse) Reset() {
	*x = GoldenGateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nanala_v1_nanala_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoldenGateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoldenGateResponse) ProtoMessage() {}

func (x *GoldenGateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nanala_v1_nanala_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoldenGateResponse.ProtoReflect.Descriptor instead.
func (*GoldenGateResponse) Descriptor() ([]byte, []int) {
	return file_nanala_v1_nanala_proto_rawDescGZIP(), []int{2}
}

func (x *GoldenGateResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GoldenGateResponse) GetFullSequence() string {
	if x != nil {
		return x.FullSequence
	}
	return ""
}

type SynthesizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence string         `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	PartType PartType       `protobuf:"varint,2,opt,name=part_type,json=partType,proto3,enum=nanala.v1.PartType" json:"part_type,omitempty"`
	Backbone VectorBackbone `protobuf:"varint,3,opt,name=backbone,proto3,enum=nanala.v1.VectorBackbone" json:"backbone,omitempty"`
}

func (x *SynthesizeRequest) Reset() {
	*x = SynthesizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nanala_v1_nanala_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizeRequest) ProtoMessage() {}

func (x *SynthesizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nanala_v1_nanala_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizeRequest.ProtoReflect.Descriptor instead.
func (*SynthesizeRequest) Descriptor() ([]byte, []int) {
	return file_nanala_v1_nanala_proto_rawDescGZIP(), []int{3}
}

func (x *SynthesizeRequest) GetSequence() string {
	if x != nil {
		return x.Sequence
	}
	return ""
}

func (x *SynthesizeRequest) GetPartType() PartType {
	if x != nil {
		return x.PartType
	}
	return PartType_PART_TYPE_UNSPECIFIED
}

func (x *SynthesizeRequest) GetBackbone() VectorBackbone {
	if x != nil {
		return x.Backbone
	}
	return VectorBackbone_VECTOR_BACKBONE_UNSPECIFIED
}

type SynthesizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FullSequence string   `protobuf:"bytes,2,opt,name=full_sequence,json=fullSequence,proto3" json:"full_sequence,omitempty"`
	PartType     PartType `protobuf:"varint,3,opt,name=part_type,json=partType,proto3,enum=nanala.v1.PartType" json:"part_type,omitempty"`
}

func (x *SynthesizeResponse) Reset() {
	*x = SynthesizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_nanala_v1_nanala_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SynthesizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizeResponse) ProtoMessage() {}

func (x *SynthesizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nanala_v1_nanala_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizeResponse.ProtoReflect.Descriptor instead.
func (*SynthesizeResponse) Descriptor() ([]byte, []int) {
	return file_nanala_v1_nanala_proto_rawDescGZIP(), []int{4}
}

func (x *SynthesizeResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SynthesizeResponse) GetFullSequence() string {
	if x != nil {
		return x.FullSequence
	}
	return ""
}

func (x *SynthesizeResponse) GetPartType() PartType {
	if x != nil {
		return x.PartType
	}
	return PartType_PART_TYPE_UNSPECIFIED
}

var File_nanala_v1_nanala_proto protoreflect.FileDescriptor

var file_nanala_v1_nanala_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6e, 0x61,
	0x6c, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61,
	0x2e, 0x76, 0x31, 0x22, 0x8c, 0x01, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x61, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4f,
	0x76, 0x65, 0x72, 0x68, 0x61, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x61,
	0x6e, 0x67, 0x22, 0x7d, 0x0a, 0x11, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x47, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x61, 0x6e,
	0x61, 0x6c, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x61,
	0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e,
	0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e,
	0x65, 0x22, 0x49, 0x0a, 0x12, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x11, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x30,
	0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x35, 0x0a, 0x08, 0x62, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x52, 0x08, 0x62,
	0x61, 0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x22, 0x7b, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x75, 0x6c, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x2a, 0x4e, 0x0a, 0x0e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x62, 0x6f, 0x6e, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52,
	0x5f, 0x42, 0x41, 0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x45, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x42, 0x4f, 0x4e, 0x45, 0x5f, 0x50, 0x4f, 0x50, 0x45, 0x4e,
	0x56, 0x33, 0x10, 0x01, 0x2a, 0xc0, 0x03, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x41, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x42, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x44, 0x53, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d,
	0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x41, 0x52, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4d, 0x4f, 0x54, 0x45, 0x52, 0x5f, 0x52,
	0x42, 0x53, 0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x41, 0x52,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x44, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4e,
	0x5f, 0x54, 0x41, 0x47, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10, 0x09, 0x12, 0x22,
	0x0a, 0x1e, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x45, 0x52, 0x4d,
	0x49, 0x4e, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x5f, 0x54, 0x41, 0x47,
	0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x43, 0x5f, 0x54, 0x41, 0x47, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x52, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x4c, 0x45,
	0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x2f,
	0x0a, 0x2b, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x41, 0x52, 0x47,
	0x45, 0x54, 0x5f, 0x4f, 0x52, 0x49, 0x5f, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x53, 0x54,
	0x52, 0x45, 0x41, 0x4d, 0x5f, 0x48, 0x4f, 0x4d, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x10, 0x0d, 0x12,
	0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x50, 0x53,
	0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x48, 0x4f, 0x4d, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x10, 0x0e,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x42,
	0x53, 0x5f, 0x43, 0x44, 0x53, 0x10, 0x0f, 0x32, 0xa5, 0x01, 0x0a, 0x0d, 0x4e, 0x61, 0x6e, 0x61,
	0x6c, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x6f, 0x6c,
	0x64, 0x65, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6c, 0x64, 0x65, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x1c, 0x2e, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x37, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x61,
	0x6e, 0x61, 0x6c, 0x61, 0x62, 0x69, 0x6f, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x62, 0x2f, 0x67,
	0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x2f, 0x76, 0x31, 0x3b,
	0x6e, 0x61, 0x6e, 0x61, 0x6c, 0x61, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nanala_v1_nanala_proto_rawDescOnce sync.Once
	file_nanala_v1_nanala_proto_rawDescData = file_nanala_v1_nanala_proto_rawDesc
)

func file_nanala_v1_nanala_proto_rawDescGZIP() []byte {
	file_nanala_v1_nanala_proto_rawDescOnce.Do(func() {
		file_nanala_v1_nanala_proto_rawDescData = protoimpl.X.CompressGZIP(file_nanala_v1_nanala_proto_rawDescData)
	})
	return file_nanala_v1_nanala_proto_rawDescData
}

var file_nanala_v1_nanala_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nanala_v1_nanala_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_nanala_v1_nanala_proto_goTypes = []interface{}{
	(VectorBackbone)(0),        // 0: nanala.v1.VectorBackbone
	(PartType)(0),              // 1: nanala.v1.PartType
	(*Fragment)(nil),           // 2: nanala.v1.Fragment
	(*GoldenGateRequest)(nil),  // 3: nanala.v1.GoldenGateRequest
	(*GoldenGateResponse)(nil), // 4: nanala.v1.GoldenGateResponse
	(*SynthesizeRequest)(nil),  // 5: nanala.v1.SynthesizeRequest
	(*SynthesizeResponse)(nil), // 6: nanala.v1.SynthesizeResponse
}
var file_nanala_v1_nanala_proto_depIdxs = []int32{
	2, // 0: nanala.v1.GoldenGateRequest.fragments:type_name -> nanala.v1.Fragment
	0, // 1: nanala.v1.GoldenGateRequest.backbone:type_name -> nanala.v1.VectorBackbone
	1, // 2: nanala.v1.SynthesizeRequest.part_type:type_name -> nanala.v1.PartType
	0, // 3: nanala.v1.SynthesizeRequest.backbone:type_name -> nanala.v1.VectorBackbone
	1, // 4: nanala.v1.SynthesizeResponse.part_type:type_name -> nanala.v1.PartType
	3, // 5: nanala.v1.NanalaService.GoldenGate:input_type -> nanala.v1.GoldenGateRequest
	5, // 6: nanala.v1.NanalaService.Synthesize:input_type -> nanala.v1.SynthesizeRequest
	4, // 7: nanala.v1.NanalaService.GoldenGate:output_type -> nanala.v1.GoldenGateResponse
	6, // 8: nanala.v1.NanalaService.Synthesize:output_type -> nanala.v1.SynthesizeResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_nanala_v1_nanala_proto_init() }
func file_nanala_v1_nanala_proto_init() {
	if File_nanala_v1_nanala_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_nanala_v1_nanala_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nanala_v1_nanala_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoldenGateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nanala_v1_nanala_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoldenGateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nanala_v1_nanala_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_nanala_v1_nanala_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SynthesizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nanala_v1_nanala_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nanala_v1_nanala_proto_goTypes,
		DependencyIndexes: file_nanala_v1_nanala_proto_depIdxs,
		EnumInfos:         file_nanala_v1_nanala_proto_enumTypes,
		MessageInfos:      file_nanala_v1_nanala_proto_msgTypes,
	}.Build()
	File_nanala_v1_nanala_proto = out.File
	file_nanala_v1_nanala_proto_rawDesc = nil
	file_nanala_v1_nanala_proto_goTypes = nil
	file_nanala_v1_nanala_proto_depIdxs = nil
}
